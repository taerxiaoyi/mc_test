/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: SportModeState_.idl
  Source: SportModeState_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_UNITREE_IDL_HG_SPORTMODESTATE__HPP
#define DDSCXX_UNITREE_IDL_HG_SPORTMODESTATE__HPP

#include <cstdint>

namespace unitree_hg
{
namespace msg
{
namespace dds_
{
class SportModeState_
{
private:
 uint32_t fsm_id_ = 0;
 uint32_t fsm_mode_ = 0;
 uint32_t task_id_ = 0;
 float task_time_ = 0.0f;

public:
  SportModeState_() = default;

  explicit SportModeState_(
    uint32_t fsm_id,
    uint32_t fsm_mode,
    uint32_t task_id,
    float task_time) :
    fsm_id_(fsm_id),
    fsm_mode_(fsm_mode),
    task_id_(task_id),
    task_time_(task_time) { }

  uint32_t fsm_id() const { return this->fsm_id_; }
  uint32_t& fsm_id() { return this->fsm_id_; }
  void fsm_id(uint32_t _val_) { this->fsm_id_ = _val_; }
  uint32_t fsm_mode() const { return this->fsm_mode_; }
  uint32_t& fsm_mode() { return this->fsm_mode_; }
  void fsm_mode(uint32_t _val_) { this->fsm_mode_ = _val_; }
  uint32_t task_id() const { return this->task_id_; }
  uint32_t& task_id() { return this->task_id_; }
  void task_id(uint32_t _val_) { this->task_id_ = _val_; }
  float task_time() const { return this->task_time_; }
  float& task_time() { return this->task_time_; }
  void task_time(float _val_) { this->task_time_ = _val_; }

  bool operator==(const SportModeState_& _other) const
  {
    (void) _other;
    return fsm_id_ == _other.fsm_id_ &&
      fsm_mode_ == _other.fsm_mode_ &&
      task_id_ == _other.task_id_ &&
      task_time_ == _other.task_time_;
  }

  bool operator!=(const SportModeState_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::getTypeName()
{
  return "unitree_hg::msg::dds_::SportModeState_";
}

template <> constexpr bool TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::type_map_blob_sz() { return 354; }
template<> constexpr unsigned int TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x6b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x28,  0xcf,  0xd7,  0xf0,  0x1c,  0x80,  0xe8, 
 0x28,  0xb3,  0x93,  0x6e,  0xf9,  0xad,  0xcd,  0x00,  0x53,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x2d,  0xd6,  0x36,  0xc3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x8d,  0x48,  0xe5,  0x3f,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x57,  0x74,  0x6c,  0xc8,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x80,  0xea,  0xf8,  0x4c,  0x00, 
 0xc8,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x8c,  0x32,  0xbb,  0x55,  0x6f,  0x4d,  0x30, 
 0xa5,  0xcc,  0x29,  0x21,  0x14,  0x99,  0xd6,  0x00,  0xb0,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74, 
 0x72,  0x65,  0x65,  0x5f,  0x68,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73, 
 0x5f,  0x3a,  0x3a,  0x53,  0x70,  0x6f,  0x72,  0x74,  0x4d,  0x6f,  0x64,  0x65,  0x53,  0x74,  0x61,  0x74, 
 0x65,  0x5f,  0x00,  0x00,  0x74,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00,  0x66,  0x73,  0x6d,  0x5f, 
 0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x09,  0x00,  0x00,  0x00,  0x66,  0x73,  0x6d,  0x5f,  0x6d,  0x6f,  0x64,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x74,  0x61,  0x73,  0x6b,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x74,  0x61,  0x73,  0x6b,  0x5f,  0x74,  0x69,  0x6d,  0x65,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x8c,  0x32,  0xbb,  0x55,  0x6f,  0x4d,  0x30,  0xa5,  0xcc,  0x29,  0x21, 
 0x14,  0x99,  0xd6,  0xf1,  0x28,  0xcf,  0xd7,  0xf0,  0x1c,  0x80,  0xe8,  0x28,  0xb3,  0x93,  0x6e,  0xf9, 
 0xad,  0xcd, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x28,  0xcf,  0xd7,  0xf0,  0x1c,  0x80,  0xe8,  0x28,  0xb3,  0x93,  0x6e, 
 0xf9,  0xad,  0xcd,  0x00,  0x57,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x8c,  0x32,  0xbb,  0x55,  0x6f,  0x4d,  0x30,  0xa5,  0xcc,  0x29,  0x21, 
 0x14,  0x99,  0xd6,  0x00,  0xb4,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_hg::msg::dds_::SportModeState_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_hg::msg::dds_::SportModeState_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_hg::msg::dds_::SportModeState_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_hg::msg::dds_::SportModeState_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_hg::msg::dds_::SportModeState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.fsm_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.fsm_mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.task_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.task_time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_hg::msg::dds_::SportModeState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hg::msg::dds_::SportModeState_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_hg::msg::dds_::SportModeState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.fsm_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.fsm_mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.task_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.task_time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_hg::msg::dds_::SportModeState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hg::msg::dds_::SportModeState_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_hg::msg::dds_::SportModeState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.fsm_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.fsm_mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.task_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.task_time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_hg::msg::dds_::SportModeState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hg::msg::dds_::SportModeState_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_hg::msg::dds_::SportModeState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.fsm_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.fsm_mode()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.task_id()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.task_time()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_hg::msg::dds_::SportModeState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hg::msg::dds_::SportModeState_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_UNITREE_IDL_HG_SPORTMODESTATE__HPP
